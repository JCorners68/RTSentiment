#!/bin/bash
# Script to create a values override file for Helm deployment
# This script generates a values override file from environment variables

set -e

# Default values
OUTPUT_FILE="values.override.yaml"
VERBOSE=false

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function for logging with timestamps
log() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo -e "${timestamp} - $1"
}

# Function to handle errors
handle_error() {
    ERROR_MSG="$1"
    log "${RED}Error: $ERROR_MSG${NC}"
    exit 1
}

# Function to display usage
usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --output-file FILE        Path to the output values file (default: values.override.yaml)"
    echo "  --verbose                 Enable verbose output"
    echo "  --help                    Display this help message"
    echo ""
    echo "Environment Variables:"
    echo "  The script uses environment variables to create the values file."
    echo "  For example: API_IMAGE_REPOSITORY, API_IMAGE_TAG, etc."
    echo ""
    echo "Example:"
    echo "  API_IMAGE_REPOSITORY=myrepo/api API_IMAGE_TAG=v1.0 $0 --output-file my-values.yaml"
    echo ""
    exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --output-file)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Display banner
log "${BLUE}=====================================================${NC}"
log "${BLUE}      Creating Values Override File                   ${NC}"
log "${BLUE}=====================================================${NC}"

# Create output directory if it doesn't exist
OUTPUT_DIR=$(dirname "$OUTPUT_FILE")
if [ "$OUTPUT_DIR" != "." ]; then
    mkdir -p "$OUTPUT_DIR"
fi

# Start building the values file
log "Generating values override file: $OUTPUT_FILE"

# Initialize values file
cat > "$OUTPUT_FILE" << EOF
# Values override file
# Generated on $(date -Iseconds)
# This file is automatically generated - DO NOT EDIT MANUALLY

EOF

# Function to add a section to the values file
add_section() {
    local section="$1"
    echo "# $section configuration" >> "$OUTPUT_FILE"
    echo "$section:" >> "$OUTPUT_FILE"
}

# Function to add an image section
add_image_section() {
    local component="$1"
    local component_upper=$(echo "$component" | tr '[:lower:]' '[:upper:]')
    
    # Check if image repository and tag environment variables exist
    local repo_var="${component_upper}_IMAGE_REPOSITORY"
    local tag_var="${component_upper}_IMAGE_TAG"
    
    if [ -n "${!repo_var}" ] || [ -n "${!tag_var}" ]; then
        echo "  image:" >> "$OUTPUT_FILE"
        
        if [ -n "${!repo_var}" ]; then
            echo "    repository: ${!repo_var}" >> "$OUTPUT_FILE"
            if [ "$VERBOSE" = true ]; then
                log "Setting $component.image.repository = ${!repo_var}"
            fi
        fi
        
        if [ -n "${!tag_var}" ]; then
            echo "    tag: ${!tag_var}" >> "$OUTPUT_FILE"
            if [ "$VERBOSE" = true ]; then
                log "Setting $component.image.tag = ${!tag_var}"
            fi
        fi
    fi
}

# Add global section
if [ -n "$ENVIRONMENT" ]; then
    echo "global:" >> "$OUTPUT_FILE"
    echo "  environment: $ENVIRONMENT" >> "$OUTPUT_FILE"
    if [ "$VERBOSE" = true ]; then
        log "Setting global.environment = $ENVIRONMENT"
    fi
    echo "" >> "$OUTPUT_FILE"
fi

# Add API section
if env | grep -q "^API_"; then
    add_section "api"
    add_image_section "api"
    
    # Add other API-specific configurations
    if [ -n "$API_REPLICAS" ]; then
        echo "  replicaCount: $API_REPLICAS" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting api.replicaCount = $API_REPLICAS"
        fi
    fi
    
    echo "" >> "$OUTPUT_FILE"
fi

# Add Auth section
if env | grep -q "^AUTH_"; then
    add_section "auth"
    add_image_section "auth"
    
    # Add other Auth-specific configurations
    if [ -n "$AUTH_REPLICAS" ]; then
        echo "  replicaCount: $AUTH_REPLICAS" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting auth.replicaCount = $AUTH_REPLICAS"
        fi
    fi
    
    echo "" >> "$OUTPUT_FILE"
fi

# Add Data Tier section
if env | grep -q "^DATA_TIER_"; then
    add_section "dataTier"
    add_image_section "data_tier"
    
    # Add other Data Tier-specific configurations
    if [ -n "$DATA_TIER_REPLICAS" ]; then
        echo "  replicaCount: $DATA_TIER_REPLICAS" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting dataTier.replicaCount = $DATA_TIER_REPLICAS"
        fi
    fi
    
    echo "" >> "$OUTPUT_FILE"
fi

# Add Data Acquisition section
if env | grep -q "^DATA_ACQUISITION_"; then
    add_section "dataAcquisition"
    add_image_section "data_acquisition"
    
    # Add other Data Acquisition-specific configurations
    if [ -n "$DATA_ACQUISITION_REPLICAS" ]; then
        echo "  replicaCount: $DATA_ACQUISITION_REPLICAS" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting dataAcquisition.replicaCount = $DATA_ACQUISITION_REPLICAS"
        fi
    fi
    
    if [ -n "$DATA_ACQUISITION_NODE_SELECTOR" ]; then
        echo "  nodeSelector:" >> "$OUTPUT_FILE"
        echo "    $DATA_ACQUISITION_NODE_SELECTOR" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting dataAcquisition.nodeSelector"
        fi
    fi
    
    if [ -n "$DATA_ACQUISITION_USE_SPOT" ]; then
        if [ "$DATA_ACQUISITION_USE_SPOT" = "true" ]; then
            echo "  useSpotInstances: true" >> "$OUTPUT_FILE"
            if [ "$VERBOSE" = true ]; then
                log "Setting dataAcquisition.useSpotInstances = true"
            fi
        fi
    fi
    
    echo "" >> "$OUTPUT_FILE"
fi

# Add Sentiment Analyzer section
if env | grep -q "^ANALYZER_"; then
    add_section "analyzer"
    add_image_section "analyzer"
    
    # Add other Analyzer-specific configurations
    if [ -n "$ANALYZER_REPLICAS" ]; then
        echo "  replicaCount: $ANALYZER_REPLICAS" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting analyzer.replicaCount = $ANALYZER_REPLICAS"
        fi
    fi
    
    if [ -n "$ANALYZER_RESOURCES_MEMORY" ] || [ -n "$ANALYZER_RESOURCES_CPU" ]; then
        echo "  resources:" >> "$OUTPUT_FILE"
        echo "    requests:" >> "$OUTPUT_FILE"
        
        if [ -n "$ANALYZER_RESOURCES_MEMORY" ]; then
            echo "      memory: $ANALYZER_RESOURCES_MEMORY" >> "$OUTPUT_FILE"
            if [ "$VERBOSE" = true ]; then
                log "Setting analyzer.resources.requests.memory = $ANALYZER_RESOURCES_MEMORY"
            fi
        fi
        
        if [ -n "$ANALYZER_RESOURCES_CPU" ]; then
            echo "      cpu: $ANALYZER_RESOURCES_CPU" >> "$OUTPUT_FILE"
            if [ "$VERBOSE" = true ]; then
                log "Setting analyzer.resources.requests.cpu = $ANALYZER_RESOURCES_CPU"
            fi
        fi
    fi
    
    echo "" >> "$OUTPUT_FILE"
fi

# Add secrets section
if [ -n "$DB_PASSWORD" ] || [ -n "$API_TOKEN" ]; then
    echo "secrets:" >> "$OUTPUT_FILE"
    
    if [ -n "$DB_PASSWORD" ]; then
        echo "  dbPassword: \"$DB_PASSWORD\"" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting secrets.dbPassword = [REDACTED]"
        fi
    fi
    
    if [ -n "$API_TOKEN" ]; then
        echo "  apiToken: \"$API_TOKEN\"" >> "$OUTPUT_FILE"
        if [ "$VERBOSE" = true ]; then
            log "Setting secrets.apiToken = [REDACTED]"
        fi
    fi
    
    echo "" >> "$OUTPUT_FILE"
fi

# Validate the generated file
if command -v yamllint &> /dev/null; then
    log "Validating YAML syntax..."
    if ! yamllint -d relaxed "$OUTPUT_FILE" > /dev/null 2>&1; then
        log "${YELLOW}Warning: The generated YAML file may have syntax issues${NC}"
        if [ "$VERBOSE" = true ]; then
            yamllint -d relaxed "$OUTPUT_FILE"
        fi
    else
        log "${GREEN}YAML validation passed${NC}"
    fi
else
    log "${YELLOW}Warning: yamllint not found, skipping YAML validation${NC}"
fi

# Final status
log "${GREEN}Values override file created successfully: $OUTPUT_FILE${NC}"

if [ "$VERBOSE" = true ]; then
    log "File contents:"
    cat "$OUTPUT_FILE" | sed -E 's/(password|token|secret|key)s*: *"[^"]+"/\1: "[REDACTED]"/g'
fi

exit 0