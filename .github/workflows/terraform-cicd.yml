name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/terraform/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'sit'
        type: choice
        options:
          - sit
          - uat
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_DIR: infrastructure/terraform/azure
  TF_LOG: INFO

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'sit' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Determine environment from inputs or branch name
      - name: Set Environment
        id: env_detect
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "ACTION=${{ github.event.inputs.action }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "ACTION=plan" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "ENVIRONMENT=uat" >> $GITHUB_ENV
            echo "ACTION=plan" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=sit" >> $GITHUB_ENV
            echo "ACTION=plan" >> $GITHUB_ENV
          fi

      # Terraform validate
      - name: Terraform Format Check
        run: |
          cd ${{ env.TF_DIR }}
          terraform fmt -check -recursive || echo "::warning::Terraform format check failed. Run 'terraform fmt -recursive' to fix formatting."

      - name: Terraform Init and Validate
        run: |
          cd ${{ env.TF_DIR }}
          terraform init -backend=false
          terraform validate

      # Terraform plan or apply based on action
      - name: Run Terraform Action
        id: terraform_action
        run: |
          cd ${{ env.TF_DIR }}
          echo "Running Terraform ${{ env.ACTION }} for ${{ env.ENVIRONMENT }} environment"
          
          # Setup backend if needed
          if [ "${{ env.ACTION }}" != "validate" ]; then
            echo "Setting up Terraform backend..."
            # Initialize with backend
            terraform init -backend-config=backends/${{ env.ENVIRONMENT }}.tfbackend
          fi
          
          # Execute appropriate action
          if [ "${{ env.ACTION }}" == "plan" ]; then
            terraform plan -out=tfplan
            echo "Terraform plan completed"
          elif [ "${{ env.ACTION }}" == "apply" ]; then
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
            echo "Terraform apply completed"
          elif [ "${{ env.ACTION }}" == "destroy" ]; then
            terraform plan -destroy -out=tfplan.destroy
            echo "‚ö†Ô∏è WARNING: You are about to destroy all resources in the ${{ env.ENVIRONMENT }} environment!"
            echo "This action cannot be undone."
            terraform apply -auto-approve tfplan.destroy
            echo "üí• All resources in the ${{ env.ENVIRONMENT }} environment have been destroyed."
          fi
