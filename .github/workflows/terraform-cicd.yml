name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'sit'
        type: choice
        options:
          - sit
          - uat
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

# Environment variables
env:
  TF_LOG: INFO

# Permissions
permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Check Repository Structure
        id: repo_check
        run: |
          # Determine the Terraform directory
          if [ -d "infrastructure/terraform/azure" ]; then
            echo "TF_DIR=infrastructure/terraform/azure" >> $GITHUB_ENV
            echo "FOUND_TF_DIR=true" >> $GITHUB_ENV
          elif [ -d "infrastructure/terraform" ]; then
            echo "TF_DIR=infrastructure/terraform" >> $GITHUB_ENV
            echo "FOUND_TF_DIR=true" >> $GITHUB_ENV
          elif [ -d "terraform" ]; then
            echo "TF_DIR=terraform" >> $GITHUB_ENV
            echo "FOUND_TF_DIR=true" >> $GITHUB_ENV
          else
            echo "TF_DIR=." >> $GITHUB_ENV
            echo "FOUND_TF_DIR=false" >> $GITHUB_ENV
            echo "::warning::No Terraform directory found. Using repository root."
          fi
          
          # Echo detected directory for debugging
          echo "Using Terraform directory: ${{ env.TF_DIR }}"
          
          # Check for basic Terraform files
          if [ -f "${{ env.TF_DIR }}/main.tf" ]; then
            echo "Found main.tf"
          else
            echo "::warning::main.tf not found in ${{ env.TF_DIR }}"
          fi
          
          # List all .tf files for reference
          echo "Terraform files found:"
          find ${{ env.TF_DIR }} -name "*.tf" -type f | sort

      - name: Terraform Format Check
        id: fmt
        if: env.FOUND_TF_DIR == 'true'
        run: |
          cd ${{ env.TF_DIR }}
          if terraform fmt -check -recursive 2>/dev/null; then
            echo "Terraform formatting is correct"
          else
            echo "::warning::Terraform format check failed. Running 'terraform fmt -recursive' would fix formatting."
          fi
        continue-on-error: true

      - name: Terraform Init
        id: init
        if: env.FOUND_TF_DIR == 'true'
        run: |
          cd ${{ env.TF_DIR }}
          # Try to initialize with backend-config if exists
          if [ -d "backends" ] && [ "${{ github.event.inputs.environment }}" != "" ]; then
            ENV="${{ github.event.inputs.environment }}"
            if [ -f "backends/${ENV}.tfbackend" ]; then
              echo "Initializing with backend config: backends/${ENV}.tfbackend"
              terraform init -backend-config=backends/${ENV}.tfbackend
            else
              echo "Backend config not found, initializing with default backend"
              terraform init
            fi
          else
            echo "Initializing with default settings (no custom backend)"
            terraform init -backend=false
          fi
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        if: env.FOUND_TF_DIR == 'true' && steps.init.outcome == 'success'
        run: |
          cd ${{ env.TF_DIR }}
          terraform validate

      - name: Terraform Plan
        id: plan
        if: env.FOUND_TF_DIR == 'true' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event_name != 'workflow_dispatch')
        run: |
          cd ${{ env.TF_DIR }}
          terraform plan -out=tfplan
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        if: env.FOUND_TF_DIR == 'true' && github.event.inputs.action == 'apply' && github.event_name == 'workflow_dispatch'
        run: |
          cd ${{ env.TF_DIR }}
          if [ -f "tfplan" ]; then
            echo "Applying saved plan"
            terraform apply -auto-approve tfplan
          else
            echo "Creating and applying new plan"
            terraform apply -auto-approve
          fi
        continue-on-error: true

      - name: Terraform Destroy
        id: destroy
        if: env.FOUND_TF_DIR == 'true' && github.event.inputs.action == 'destroy' && github.event_name == 'workflow_dispatch'
        run: |
          cd ${{ env.TF_DIR }}
          echo "⚠️ WARNING: You are about to destroy resources in the ${{ github.event.inputs.environment }} environment!"
          echo "Proceeding with terraform destroy"
          terraform destroy -auto-approve
        continue-on-error: true

      - name: Workflow Summary
        run: |
          echo "## Terraform CI/CD Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "- **Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Action:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Terraform Directory:** ${{ env.TF_DIR }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Format Check:** ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Init:** ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.validate.outcome }}" == "success" ]; then
            echo "- **Validate:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.validate.outcome }}" == "failure" ]; then
            echo "- **Validate:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Validate:** ⚠️ Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.plan.outcome }}" == "success" ]; then
            echo "- **Plan:** ✅ Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.plan.outcome }}" == "failure" ]; then
            echo "- **Plan:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Plan:** ⚠️ Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            if [ "${{ steps.apply.outcome }}" == "success" ]; then
              echo "- **Apply:** ✅ Applied successfully" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ steps.apply.outcome }}" == "failure" ]; then
              echo "- **Apply:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Apply:** ⚠️ Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            if [ "${{ steps.destroy.outcome }}" == "success" ]; then
              echo "- **Destroy:** ✅ Resources destroyed successfully" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ steps.destroy.outcome }}" == "failure" ]; then
              echo "- **Destroy:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Destroy:** ⚠️ Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          fi
