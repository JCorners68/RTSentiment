name: Promote from SIT to UAT

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to promote'
        required: true
        default: 'latest'
  
  # Optionally, could be triggered on specific branch or tag
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'services/**'

jobs:
  test_sit:
    name: Test SIT Environment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
          if [ -f environments/sit/requirements.txt ]; then pip install -r environments/sit/requirements.txt; fi
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build services
        run: |
          cd infrastructure
          docker-compose build
          docker-compose up -d
      
      - name: Wait for services to start
        run: sleep 10
      
      - name: Run SIT environment tests
        run: |
          cd environments/sit/tests
          python -m pytest -xvs
      
      - name: Stop services
        run: |
          cd infrastructure
          docker-compose down
  
  build_and_push:
    name: Build and Push Docker Images
    needs: test_sit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Data Acquisition service
        uses: docker/build-push-action@v4
        with:
          context: ./services/data-acquisition
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/data-acquisition:${{ github.event.inputs.version }}
            ghcr.io/${{ github.repository }}/data-acquisition:latest
      
      # Add similar steps for other services as they are developed
  
  deploy_to_uat:
    name: Deploy to UAT Environment
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: uat  # This requires manual approval in GitHub
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to Azure with Terraform
        run: |
          # Configure environment variables for the deployment
          export GITHUB_PAT=${{ secrets.GITHUB_TOKEN }}
          export GITHUB_USER=${{ github.actor }}
          export GITHUB_REPO=${{ github.repository }}
          export TF_VAR_location="westus"  # US West for low latency
          export ARM_SUBSCRIPTION_ID="644936a7-e58a-4ccb-a882-0005f213f5bd"
          export ARM_TENANT_ID="1ced8c49-a03c-439c-9ff1-0c23f5128720"
          
          # Initialize and apply Terraform configuration
          cd infrastructure/terraform/azure
          terraform init
          terraform apply -auto-approve
          
          # Use terraform output to set variables for the next steps
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          AKS_CLUSTER=$(terraform output -raw aks_cluster_name)
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          
          echo "Deploying version ${{ github.event.inputs.version }} to UAT environment..."
          echo "Using Proximity Placement Group in US West region for low latency"
          
          # Get AKS credentials for kubectl
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER --overwrite-existing
          
          # Update Kubernetes manifests with the correct image reference
          sed -i "s|image:.*|image: ${ACR_LOGIN_SERVER}/data-acquisition:${{ github.event.inputs.version }}|g" ../../kubernetes/base/data-acquisition.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f ../../kubernetes/base/data-acquisition.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/data-acquisition
      
      - name: Run UAT verification tests
        run: |
          cd environments/uat/tests
          # In a real implementation, this would run tests against the UAT environment
          echo "Running UAT verification tests..."
      
      - name: Update UAT version
        run: |
          echo "Updated UAT environment to version ${{ github.event.inputs.version }}"
