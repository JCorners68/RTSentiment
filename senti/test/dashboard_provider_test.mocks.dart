// Mocks generated by Mockito 5.4.6 from annotations
// in senti/test/dashboard_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:senti/api/api_client.dart' as _i4;
import 'package:senti/models/data_flow_point.dart' as _i7;
import 'package:senti/models/message_stats.dart' as _i3;
import 'package:senti/models/sentiment_event.dart' as _i6;
import 'package:senti/models/ticker_sentiment.dart' as _i2;
import 'package:senti/services/websocket_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTickerSentiment_0 extends _i1.SmartFake
    implements _i2.TickerSentiment {
  _FakeTickerSentiment_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageStats_1 extends _i1.SmartFake implements _i3.MessageStats {
  _FakeMessageStats_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i4.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<String?> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<_i2.TickerSentiment> getTickerSentiment(String? ticker) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTickerSentiment,
          [ticker],
        ),
        returnValue:
            _i5.Future<_i2.TickerSentiment>.value(_FakeTickerSentiment_0(
          this,
          Invocation.method(
            #getTickerSentiment,
            [ticker],
          ),
        )),
      ) as _i5.Future<_i2.TickerSentiment>);

  @override
  _i5.Future<List<_i2.TickerSentiment>> getTopPositiveSentiment(
          {int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopPositiveSentiment,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i2.TickerSentiment>>.value(
            <_i2.TickerSentiment>[]),
      ) as _i5.Future<List<_i2.TickerSentiment>>);

  @override
  _i5.Future<List<_i2.TickerSentiment>> getTopNegativeSentiment(
          {int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopNegativeSentiment,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i2.TickerSentiment>>.value(
            <_i2.TickerSentiment>[]),
      ) as _i5.Future<List<_i2.TickerSentiment>>);

  @override
  _i5.Future<List<_i6.SentimentEvent>> queryEvents({
    int? limit = 20,
    int? offset = 0,
    DateTime? startDate,
    DateTime? endDate,
    List<String>? tickers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryEvents,
          [],
          {
            #limit: limit,
            #offset: offset,
            #startDate: startDate,
            #endDate: endDate,
            #tickers: tickers,
          },
        ),
        returnValue:
            _i5.Future<List<_i6.SentimentEvent>>.value(<_i6.SentimentEvent>[]),
      ) as _i5.Future<List<_i6.SentimentEvent>>);

  @override
  _i5.Future<_i3.MessageStats> getSystemStats() => (super.noSuchMethod(
        Invocation.method(
          #getSystemStats,
          [],
        ),
        returnValue: _i5.Future<_i3.MessageStats>.value(_FakeMessageStats_1(
          this,
          Invocation.method(
            #getSystemStats,
            [],
          ),
        )),
      ) as _i5.Future<_i3.MessageStats>);

  @override
  _i5.Future<Map<String, List<String>>> getMetadata() => (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [],
        ),
        returnValue: _i5.Future<Map<String, List<String>>>.value(
            <String, List<String>>{}),
      ) as _i5.Future<Map<String, List<String>>>);

  @override
  _i5.Future<List<String>> getAvailableTickers() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableTickers,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<_i7.DataFlowPoint>> getDataFlow({int? points = 30}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataFlow,
          [],
          {#points: points},
        ),
        returnValue:
            _i5.Future<List<_i7.DataFlowPoint>>.value(<_i7.DataFlowPoint>[]),
      ) as _i5.Future<List<_i7.DataFlowPoint>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WebSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketService extends _i1.Mock implements _i8.WebSocketService {
  MockWebSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i5.Stream<bool> get connectionStatusStream => (super.noSuchMethod(
        Invocation.getter(#connectionStatusStream),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAuthToken() => super.noSuchMethod(
        Invocation.method(
          #clearAuthToken,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void connect({required _i8.MessageHandler? onMessage}) => super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {#onMessage: onMessage},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnect({bool? attemptReconnect = false}) => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {#attemptReconnect: attemptReconnect},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
