#!/bin/bash
# Script to run the Flutter app in demo mode (using sample data)

# Define colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Running Flutter Dashboard in Demo Mode${NC}"
echo -e "${YELLOW}This will use sample data without connecting to a real API${NC}"

# Get dependencies
echo -e "${YELLOW}Getting dependencies...${NC}"
flutter pub get

# Run build runner to generate JSON serialization code
echo -e "${YELLOW}Running build_runner...${NC}"
dart run build_runner build --delete-conflicting-outputs

# Create a temporary demo file that forces the use of sample data
cat > lib/demo_mode.dart << 'EOF'
// This file enables demo mode for the dashboard
// It is automatically generated by run_demo.sh

const bool DEMO_MODE = true;
EOF

# Create a temporary demo mode config to override the use of real API
cat > lib/demo_mode.dart << 'EOF'
// This file enables demo mode for the dashboard
// It is automatically generated by run_demo.sh

const bool DEMO_MODE = true;
EOF

# Modify dashboard provider to always use sample data
echo -e "${YELLOW}Setting up demo mode...${NC}"
cat > lib/temp_dashboard_provider.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'dart:math';
import '../api/api_client.dart';
import '../models/ticker_sentiment.dart';
import '../models/sentiment_event.dart';
import '../models/query_params.dart';
import '../models/event_source.dart';

class DashboardProvider extends ChangeNotifier {
  final ApiClient _apiClient = ApiClient();
  
  // Dashboard data
  List<TickerSentiment> _topPositive = [];
  List<TickerSentiment> _topNegative = [];
  List<SentimentEvent> _recentEvents = [];
  List<String> _availableTickers = [];
  List<EventSource> _eventSources = [];
  List<Map<String, dynamic>> _dataFlowPoints = [];
  
  // System stats
  int _sourceCount = 0;
  String _sourceNames = '';
  int _eventsProcessed = 0;
  int _modelCount = 1;
  String _primaryModel = 'FinBERT';
  String _systemStatus = 'Healthy';
  String _uptime = '3h 24m';
  
  // Loading states
  bool _isLoading = false;
  bool _isLoadingEvents = false;
  bool _isLoadingDataFlow = false;
  
  // Getters
  List<TickerSentiment> get topPositive => _topPositive;
  List<TickerSentiment> get topNegative => _topNegative;
  List<SentimentEvent> get recentEvents => _recentEvents;
  List<String> get availableTickers => _availableTickers;
  List<EventSource> get eventSources => _eventSources;
  List<Map<String, dynamic>> get dataFlowPoints => _dataFlowPoints;
  
  int get sourceCount => _sourceCount;
  String get sourceNames => _sourceNames;
  int get eventsProcessed => _eventsProcessed;
  int get modelCount => _modelCount;
  String get primaryModel => _primaryModel;
  String get systemStatus => _systemStatus;
  String get uptime => _uptime;
  
  bool get isLoading => _isLoading;
  bool get isLoadingEvents => _isLoadingEvents;
  bool get isLoadingDataFlow => _isLoadingDataFlow;
  
  // Load all dashboard data
  Future<void> loadData() async {
    _isLoading = true;
    notifyListeners();
    
    try {
      // In demo mode, always use sample data
      _loadSampleSentimentData();
      _loadSampleEventsData();
      _availableTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA'];
      _loadSampleEventSources();
      _loadSampleSystemStats();
      _loadSampleDataFlow();
    } catch (e) {
      debugPrint('Error loading dashboard data: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
  
  // Load sample event sources
  void _loadSampleEventSources() {
    _eventSources = [
      EventSource(
        name: 'news_scrapers',
        isActive: true,
        targets: ['financial_news', 'market_updates', 'earnings_reports'],
        outputTopic: 'news-events-high',
        frequency: '5min',
      ),
      EventSource(
        name: 'reddit_scrapers',
        isActive: true,
        targets: ['wallstreetbets', 'investing', 'stocks'],
        outputTopic: 'news-events-standard',
        frequency: '10min',
      ),
      EventSource(
        name: 'twitter_scrapers',
        isActive: false,
        targets: ['\$TICKER', 'investing', 'markets'],
        outputTopic: 'news-events-standard',
        frequency: '2min',
      ),
      EventSource(
        name: 'sec_filings',
        isActive: true,
        targets: ['8-K', '10-Q', '10-K'],
        outputTopic: 'news-events-high',
        frequency: '15min',
      ),
    ];
    
    _sourceCount = _eventSources.where((s) => s.isActive).length;
    _sourceNames = _eventSources
        .where((s) => s.isActive)
        .map((s) => s.name.replaceAll('_scrapers', '').replaceAll('_', ' '))
        .join(', ');
  }
  
  // Load sample system stats
  void _loadSampleSystemStats() {
    _eventsProcessed = 128;
    _modelCount = 1;
    _primaryModel = 'FinBERT';
    _systemStatus = 'Healthy';
    _uptime = '3h 24m';
  }
  
  // Create sample data when API is not available
  void _loadSampleSentimentData() {
    _topPositive = [
      TickerSentiment(
        ticker: 'AAPL',
        sentiment: 'positive',
        score: 0.85,
        weight: 1.5,
        count: 25,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'MSFT',
        sentiment: 'positive',
        score: 0.78,
        weight: 1.2,
        count: 18,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'GOOGL',
        sentiment: 'positive',
        score: 0.72,
        weight: 1.0,
        count: 15,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'AMZN',
        sentiment: 'positive',
        score: 0.65,
        weight: 1.1,
        count: 20,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'NVDA',
        sentiment: 'positive',
        score: 0.58,
        weight: 1.3,
        count: 22,
        model: 'finbert',
      ),
    ];
    
    _topNegative = [
      TickerSentiment(
        ticker: 'META',
        sentiment: 'negative',
        score: -0.45,
        weight: 0.9,
        count: 12,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'NFLX',
        sentiment: 'negative',
        score: -0.52,
        weight: 1.0,
        count: 8,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'TSLA',
        sentiment: 'negative',
        score: -0.65,
        weight: 1.4,
        count: 30,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'BABA',
        sentiment: 'negative',
        score: -0.72,
        weight: 0.8,
        count: 10,
        model: 'finbert',
      ),
      TickerSentiment(
        ticker: 'GME',
        sentiment: 'negative',
        score: -0.88,
        weight: 1.1,
        count: 15,
        model: 'finbert',
      ),
    ];
  }
  
  void _loadSampleEventsData() {
    final now = DateTime.now();
    
    _recentEvents = [
      SentimentEvent(
        id: 1001,
        eventId: 'evt_001',
        timestamp: now.subtract(const Duration(minutes: 5)),
        source: 'news',
        priority: 'high',
        model: 'finbert',
        sentimentScore: 0.85,
        sentimentLabel: 'positive',
      ),
      SentimentEvent(
        id: 1002,
        eventId: 'evt_002',
        timestamp: now.subtract(const Duration(minutes: 12)),
        source: 'reddit',
        priority: 'standard',
        model: 'finbert',
        sentimentScore: -0.45,
        sentimentLabel: 'negative',
      ),
      SentimentEvent(
        id: 1003,
        eventId: 'evt_003',
        timestamp: now.subtract(const Duration(minutes: 18)),
        source: 'twitter',
        priority: 'standard',
        model: 'finbert',
        sentimentScore: 0.12,
        sentimentLabel: 'neutral',
      ),
      SentimentEvent(
        id: 1004,
        eventId: 'evt_004',
        timestamp: now.subtract(const Duration(minutes: 25)),
        source: 'sec',
        priority: 'high',
        model: 'finbert',
        sentimentScore: -0.78,
        sentimentLabel: 'negative',
      ),
      SentimentEvent(
        id: 1005,
        eventId: 'evt_005',
        timestamp: now.subtract(const Duration(minutes: 35)),
        source: 'news',
        priority: 'high',
        model: 'finbert',
        sentimentScore: 0.91,
        sentimentLabel: 'positive',
      ),
    ];
  }
  
  // Load data flow visualization data
  void _loadSampleDataFlow() {
    // Generate sample data points for the last 30 minutes
    final now = DateTime.now();
    _dataFlowPoints = List.generate(30, (index) {
      final timestamp = now.subtract(Duration(minutes: 30 - index));
      return {
        'timestamp': timestamp,
        'high_priority': _generateRandomValue(index, 0, 3),
        'standard_priority': _generateRandomValue(index, 2, 5),
        'results': _generateRandomValue(index - 1, 1, 7),
      };
    });
  }
  
  // Helper for data flow visualization
  double _generateRandomValue(int index, int min, int max) {
    if (index < 0) return 0;
    
    // Create a pattern that looks somewhat realistic
    final base = min + (index % (max - min));
    return base + (index % 3) * 0.5;
  }

  // Methods below are placeholders for API calls that won't be used in demo mode
  // They are defined to match the interface of DashboardProvider
  
  Future<void> loadTopSentiment() async {
    _loadSampleSentimentData();
  }
  
  Future<void> loadRecentEvents({int limit = 10}) async {
    _loadSampleEventsData();
  }
  
  Future<void> loadAvailableTickers() async {
    _availableTickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA'];
  }
  
  Future<void> loadEventSources() async {
    _loadSampleEventSources();
  }
  
  Future<void> loadSystemStats() async {
    _loadSampleSystemStats();
  }
  
  Future<void> loadDataFlow() async {
    _isLoadingDataFlow = true;
    notifyListeners();
    
    try {
      _loadSampleDataFlow();
    } finally {
      _isLoadingDataFlow = false;
      notifyListeners();
    }
  }
}
EOF

# Move the temp file to replace the dashboard provider
mv lib/temp_dashboard_provider.dart lib/providers/dashboard_provider.dart

# Update settings provider to avoid setState during build
cat > lib/temp_settings_provider.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class SettingsProvider extends ChangeNotifier {
  // Default settings
  ThemeMode _themeMode = ThemeMode.light;
  int _refreshInterval = 30; // seconds
  bool _autoRefresh = true;
  String _apiUrl = 'http://localhost:8001';
  
  // Getters
  ThemeMode get themeMode => _themeMode;
  int get refreshInterval => _refreshInterval;
  bool get autoRefresh => _autoRefresh;
  String get apiUrl => _apiUrl;
  
  // Constructor
  SettingsProvider() {
    // Load settings asynchronously to avoid calling setState during build
    Future.microtask(() => _loadSettings());
  }
  
  // Load settings from SharedPreferences
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      final isDarkMode = prefs.getBool('isDarkMode') ?? false;
      _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;
      
      _refreshInterval = prefs.getInt('refreshInterval') ?? 30;
      _autoRefresh = prefs.getBool('autoRefresh') ?? true;
      _apiUrl = prefs.getString('apiUrl') ?? 'http://localhost:8001';
      
      notifyListeners();
    } catch (e) {
      debugPrint('Error loading settings: $e');
    }
  }
  
  // Save settings to SharedPreferences
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      await prefs.setBool('isDarkMode', _themeMode == ThemeMode.dark);
      await prefs.setInt('refreshInterval', _refreshInterval);
      await prefs.setBool('autoRefresh', _autoRefresh);
      await prefs.setString('apiUrl', _apiUrl);
    } catch (e) {
      debugPrint('Error saving settings: $e');
    }
  }
  
  // Toggle theme mode
  void toggleTheme() {
    _themeMode = _themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
    _saveSettings();
    notifyListeners();
  }
  
  // Update refresh interval
  void setRefreshInterval(int seconds) {
    _refreshInterval = seconds;
    _saveSettings();
    notifyListeners();
  }
  
  // Update auto refresh
  void setAutoRefresh(bool value) {
    _autoRefresh = value;
    _saveSettings();
    notifyListeners();
  }
  
  // Update API URL
  void setApiUrl(String url) {
    _apiUrl = url;
    _saveSettings();
    notifyListeners();
  }
}
EOF

# Move the temp file to replace the settings provider
mv lib/temp_settings_provider.dart lib/providers/settings_provider.dart

# Create an improved splash screen with delayed initialization
cat > lib/temp_splash_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import '../providers/auth_provider.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.0, 0.6, curve: Curves.easeIn),
      ),
    );

    _scaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.2, 0.8, curve: Curves.easeOut),
      ),
    );

    _animationController.forward();
    
    // Delayed initialization to avoid setState during build
    Future.delayed(Duration.zero, () {
      _checkAuthAndNavigate();
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _checkAuthAndNavigate() async {
    // Simple delayed navigation for demo mode
    await Future.delayed(const Duration(seconds: 2));
    
    if (mounted) {
      // Always go to home screen in demo mode
      Navigator.of(context).pushReplacementNamed('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.primary,
      body: Center(
        child: AnimatedBuilder(
          animation: _animationController,
          builder: (context, child) {
            return FadeTransition(
              opacity: _fadeAnimation,
              child: Transform.scale(
                scale: _scaleAnimation.value,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircleAvatar(
                      radius: 60,
                      backgroundColor: Colors.white,
                      child: Icon(
                        Icons.analytics,
                        size: 70,
                        color: Theme.of(context).colorScheme.primary,
                      ),
                    ),
                    const SizedBox(height: 32),
                    const Text(
                      'RT Sentiment Dashboard',
                      style: TextStyle(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'Real-Time Sentiment Analysis',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.white70,
                      ),
                    ),
                    const SizedBox(height: 48),
                    const CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                    const SizedBox(height: 16),
                    const Text(
                      'DEMO MODE',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: Colors.yellow,
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
EOF

# Move the temp file to replace the splash screen
mv lib/temp_splash_screen.dart lib/screens/splash_screen.dart

# Create an auth provider that automatically logs in for demo mode
cat > lib/temp_auth_provider.dart << 'EOF'
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../api/api_client.dart';

class AuthProvider extends ChangeNotifier {
  final ApiClient _apiClient = ApiClient();
  
  bool _isAuthenticated = true; // Always authenticated in demo mode
  String? _username = "demo";
  String? _token = "demo_token";
  
  bool get isAuthenticated => _isAuthenticated;
  String? get username => _username;
  String? get token => _token;
  
  // Constructor
  AuthProvider() {
    // Already authenticated in demo mode
  }
  
  // Load authentication state - public method
  Future<void> loadAuthState() async {
    // Already authenticated in demo mode
    return Future.value();
  }

  // Login user - always succeeds in demo mode
  Future<bool> login(String username, String password) async {
    return Future.value(true);
  }
  
  // Logout user - just for show in demo mode
  Future<void> logout() async {
    // Simulate logout but stay logged in for demo
    await Future.delayed(const Duration(milliseconds: 500));
  }
  
  // Check if token is valid - always valid in demo mode
  Future<bool> checkAuth() async {
    return Future.value(true);
  }
}
EOF

# Move the temp file to replace the auth provider
mv lib/temp_auth_provider.dart lib/providers/auth_provider.dart

# Try first with Linux desktop
if flutter devices | grep -q linux; then
  echo -e "${GREEN}Running in demo mode on Linux desktop...${NC}"
  flutter run -d linux
# Then try chrome if Linux fails
elif flutter devices | grep -q chrome; then
  echo -e "${GREEN}Running in demo mode on Chrome...${NC}"
  flutter run -d chrome
# Then try web-server mode
elif flutter devices | grep -q web; then
  echo -e "${GREEN}Running in demo mode on web...${NC}"
  flutter run -d web-server --web-hostname=0.0.0.0 --web-port=8080
# Finally just run with whatever device is available
else
  echo -e "${GREEN}Running in demo mode...${NC}"
  flutter run
fi

# Restore original API client after app is closed
echo -e "${YELLOW}Cleaning up demo mode files...${NC}"
rm lib/demo_mode.dart